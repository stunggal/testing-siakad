//soal controller

<?php

namespace app\controllers;

use Yii;
use app\models\Soal;
use yii\web\Controller;
use app\models\SoalSearch;
use app\models\SimakJadwal;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use app\models\SimakMasterdosen;
use yii\web\NotFoundHttpException;

/**
 * SoalController implements the CRUD actions for Soal model.
 */
class SoalController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Soal models.
     * @return mixed
     */
    public function actionIndex($jid)
    {
        $searchModel = new SoalSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'jid' => $jid,
        ]);
    }


    /**
     * Displays a single Soal model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Soal model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($jid)
    {
        $model = new Soal();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            Yii::$app->session->setFlash('success', "Data tersimpan");
            return $this->redirect(['view', 'id' => $model->id]);
        }
        $jadwal = SimakJadwal::findOne($jid);
        $dosen = SimakMasterdosen::findOne([
            'nidn' => $jadwal->kode_dosen
        ]);

        return $this->render('create', [
            'model' => $model,
            'dosen' => $dosen,
            'jid' => $jid,
            'jadwal' => $jadwal,
        ]);
    }

    /**
     * Updates an existing Soal model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            Yii::$app->session->setFlash('success', "Data tersimpan");
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Soal model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Soal model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Soal the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Soal::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}



//soal model
<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "soal".
 *
 * @property int $id
 * @property int $dosen_id
 * @property int $no
 * @property string|null $verify_at
 * @property string|null $updated_at
 * @property string|null $created_at
 * @property int|null $verify_by
 * @property int $ujian
 * @property string $soal
 *
 * @property SimakMasterdosen $dosenPengampu
 * @property Jawaban[] $jawabans
 * @property Ujian $ujian0
 * @property SimakUsers $verifiedBy
 */
class Soal extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'soal';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['dosen_id', 'no', 'ujian', 'soal'], 'required'],
            [['dosen_id', 'no', 'verify_by', 'ujian'], 'integer'],
            [['verify_at', 'updated_at', 'created_at'], 'safe'],
            [['soal'], 'string', 'max' => 9999],
            [['dosen_id'], 'exist', 'skipOnError' => true, 'targetClass' => SimakMasterdosen::className(), 'targetAttribute' => ['dosen_id' => 'id']],
            [['verify_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['verify_by' => 'id']],
            [['ujian'], 'exist', 'skipOnError' => true, 'targetClass' => Ujian::className(), 'targetAttribute' => ['ujian' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'dosen_id' => 'Dosen Id',
            'no' => 'No',
            'verify_at' => 'Verify At',
            'updated_at' => 'Updated At',
            'created_at' => 'Created At',
            'verify_by' => 'Verified By',
            'ujian' => 'Ujian',
            'soal' => 'Soal',
        ];
    }

    /**
     * Gets query for [[DosenPengampu]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getDosenPengampu()
    {
        return $this->hasOne(SimakMasterdosen::className(), ['id' => 'dosen_id']);
    }

    /**
     * Gets query for [[Jawabans]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getJawabans()
    {
        return $this->hasMany(Jawaban::className(), ['soal' => 'id']);
    }

    /**
     * Gets query for [[Ujian0]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUjian0()
    {
        return $this->hasOne(Ujian::className(), ['id' => 'ujian']);
    }

    /**
     * Gets query for [[VerifiedBy]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getVerifiedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'verify_by']);
    }
}
